"" Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order. ""

class Solution(object):
    def spiralOrder(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: List[int]
        """
        
        if matrix == []:
            return []
        
        else:
            
            import numpy as np
            matrix = np.array(matrix)
            rows = matrix.shape[0]
            cols = matrix.shape[1]
        
            spiral = []
        
        
        
        # Define indeces for steps made in directions
            up = 0
            down = rows - 1
            left = 0
            right = cols - 1
        
        # mov defines direction of movement
            mov = 0
        
            while (up <= down and left <= right):
                if mov == 0:
                    for i in range(left,right + 1):
                        spiral.append(matrix[up,i])
                    
                    up += 1
                    mov = 1
                
                elif mov == 1:
                    for i in range(up,down + 1):
                        spiral.append(matrix[i,right])
                    
                    right -= 1
                    mov = 2
                
                elif mov == 2:
                    for i in range(right,left-1,-1):
                        spiral.append(matrix[down,i])
                    
                    down -= 1
                    mov = 3
                
                elif mov == 3:
                    for i in range(down,up-1,-1):
                        spiral.append(matrix[i,left])
                    
                    left += 1
                    mov = 0
                
            return spiral
